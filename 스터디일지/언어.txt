bash(bourne again shell) shell 명령어를 자동화하는 데 가장 많이 사용. 시스템 관리자에게는 핵심 툴
- 리눅스의 모든 명령어가 bash프로그램이라고 할 수 있다. 기초적인건 배우기 쉬우나 고급단계로 가면 어려워진다.
- 전산 시스템 관리자는 꼭 알아야 하는언어.

C 범용언어. 성능이 중요한 애플리케이션에서 사용
-다른 프로그램 언어보다 높은 호환성
-표준 함수로만 작성된 프로그램은 어떤 기종의 컴퓨터에서도 정상적으로 컴파일 되고 실행 됨
-다양하게 쓰인다. (공장 자동화, 사무 자동화, GUI, 시스템 프로그램, 응용프로그램)
-소프트웨어의 부품화를 실현 할 수 있음 (소프트웨어의 부품화란 새로운 프로그램을 개발하기 위해 이미 작성된 프로그램 모듈들을
				   그대로 사용 하는 곳)
-다른 프로그램 언어와 함께 혼합되어 사용될 수 있다. 혼합 프로그램을 개발하는 프로그램의 혼합성을 극대화 시킴
-함께 가장 많이 사용되는 언어는 어셈블리이다.
-UNIX시스템 자체가 C언어로 대부분 작성되었다.

C++ C와 비슷하지만, "객체지향 지원" 및 몇 가지 발전된 기능을 가짐
-크롬, 파이어폭스,엑셀,파워포인트 등이 C++로 개발

*객체 지향 프로그래밍 언어* 공통적인 특징 캡슐화, 상속, 다형성

C# .NET 프레임 워크에서 저공되는 범용 언어
-C++,자바와 비슷함
-C++로부터의 객체 지향 특성을 상속받음
-사용자 인터페이스를 쉽게 만들 수 있음
-다양한 환경의 운영체제에서 실행할 수 있다.

JAVA
-C++과 매우 비슷함.
-객체 지향 언어이다.
-구조 중립적인 언어이다.
-쓰레기 수집 기능으로 메모리 누수를 걱정하지 않고 메모리를 마음대로 사용할 수 있다.
-분산 환경에 적합한 언어이다. (뛰어난 이식성과 호환성으로 다양한 데이터베이스를 쉽게 처리할 수 있다.)

Javascript
-자바와 공통점이 하나도 없다.
-자바스크립트의 구현은 3가지다.(코어, 문서 객체 모델, 브라우저 객체 모델)
-이벤트 중심의 프로그래밍 언어
-클라이언트의 웹 브라우저에 의해 해석되고 실행
-HTML문서 내에 기술되어지고 HTML 문서와 함께 수행되어지는 언어
-객체 지향적 특성을 모두 가지고 있지 않지만 객체를 정의하여 사용할 수 있다.
-프로토타입 기반의 언어
-컴퓨터나 스마트폰 등에 포함된 대부분의 웹 브라우저에는 사바스크립트 인터프리터가 내장되어 있다.
-객체 지향형 프로그래밍과 함수형 프로그래밍을 모두 표현 가능

Objective-C
-맥 os & iOS 애플리케이션 개발에 주로 사용
-C 문법 그대로 사용해도 된다.
-id라는 데이터 형태를 제공함
-메세지 기반으로 메서드를 호출하는 언어

Swift
-Objective-C 언어를 사용하면서 동시에 swift 언어 개발이 가능
-Objective-C 보다 빠르다
-객체 지향 언어 이면서 함수형 언어
-컴파일 과정이 없는 스크립트 언어
-코코아 프레임 워크(애플 운영체제용 어플리케이션을 제작할때 사용하는 응용프로그래밍 인터페이스) 사용
-ARC를 사용한 메모리 관리
-데이터 타입이 존재하며 타입간 구분이 매우 엄격함

perl
-범용 언어로 주로 방대한 문자열을 처리하는 데 사용
-긴 문자열을 분석해 어떤 의미를 추출할 떄 펄은 최적의 언어이다.
-상대적으로 배우기 쉽다.
-C와 비슷하지만 해석형 언어이다
-동적 언어이다.
-C언어에 삽입할 수 있다. C언어를 이용한 확장성

Ruby
-쉽고 직관적인 범용, 동적 언어
-웹 개발에 주로 사용되지만, 다른 모든 종류의 애플리케이션 개발에도 사용
-Ruby on Rails 프레임 워크 사용 시 필요한 언어

Python
-사용하기 매우 쉬우며, 높은 레벨의 언어
-표현적인 언어여서 코드를 더 쉽게 이해할 수 있다.
-인터프리터 언어이다. 한번에 한줄씩 실행한다. 디버깅하는 것이 쉽다
-교차 플랫폼 언어이다. 윈도우, 리눅스, 유닉스, 매킨토시 등 처럼 다른 플랫폼에서도 동일하게 구동 할수 있다.
-객체 지향 언어이다.
-C, C++같은 다른 언어가 사용될 수 있다.
-그래픽 유저 인터페이스를 개발 할 수 있다.
